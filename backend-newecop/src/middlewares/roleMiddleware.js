import { NotAuthorizeRequestException } from "../exceptions/not-authorize-request.exception.js";
import { ForbiddenRequestException } from "../exceptions/forbidden-request.exception.js";
import { PrismaClient } from "@prisma/client";
const prisma = new PrismaClient();

export const roleMiddleware = (roleToCheck) => {
  return async (req, res, next) => {
    try {
      const userId = req.currentUser.id;

      // ‡πÉ‡∏ä‡πâ Prisma ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const user = await prisma.user.findUnique({
        where: {
          id: userId,
        },
      });

      if (!user) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        throw new NotAuthorizeRequestException("User not found");
      }

      const userRole = user.role; // ‡∏î‡∏∂‡∏á Role ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      console.log("üöÄ userRole:", userRole);

      if (userRole === roleToCheck) {
        // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ Role ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á middleware/handler ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        next();
      } else {
        // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ Role ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        throw new ForbiddenRequestException("Permission denied");
      }
    } catch (error) {
      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
      console.error("Error in roleMiddleware:", error);
      res.status(500).json({ message: "Internal Server Error" });
    }
  };
};