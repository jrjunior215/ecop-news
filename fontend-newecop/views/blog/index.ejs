<div class="container_blog">
  <div class="content_banner">
    <div class="content_text_blog">
      <div class="content_line1">
        <span>By Themadbrains in</span>
        <span id="span_blue">inspiration</span>
      </div>
      <div class="content_line2">
        <h1>Why Swift UI Should Be on the Radar of Every Mobile Developer</h1>
        <p>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempos Lorem ipsum dolor sitamet, consectetur adipiscing elit,
          sed do eiusmod tempor
        </p>
      </div>
      <div class="content_line3">
        <a href="#" type="button">Start learning now</a>
      </div>
    </div>
    <div class="content_img_blog">
      <img src="/img/darkweb.png" alt="" />
    </div>
  </div>
</div>

<div class="content_related_blog">
  <div class="header_blog_list">
    <h1>Trending News</h1>
  </div>

  <div class="trending_slide">
    <div class="slide-container swiper">
      <div class="slide-content">
        <div class="card-wrapper swiper-wrapper">
          <!-- <div class="card swiper-slide">
            <div class="image-content">
              <img src="/img/background.png" alt="" />
            </div>

            <div class="card-content">
              <h2 class="name"></h2>
              <p class="description">
              </p>

              <button class="button"></button>
            </div>
          </div> -->
        </div>
      </div>

      <div class="swiper-button-next swiper-navBtn"></div>
      <div class="swiper-button-prev swiper-navBtn"></div>
      <div class="swiper-pagination"></div>
    </div>
  </div>
</div>

<div class="content_maketing_articles">
  <div class="header_blog_list">
    <h1>News Articles</h1>
  </div>
  <div class="search_blog_list">
    <input type="text" id="searchInput" placeholder="Search News" />
    <button id="searchButton">
      <i class="fa fa-search" aria-hidden="true"></i>
    </button>
  </div>
  <div class="main_maketing_articles"></div>

  <div class="container_pagination">
    <div class="pagination">
      <a class="pagination-newer" href="#">PREV</a>
      <span class="pagination-inner">
        <a href="#">1</a>
        <a href="#">2</a>
        <a href="#">3</a>
        <a href="#">4</a>
        <a href="#">5</a>
        <a href="#">6</a>
      </span>
      <a class="pagination-older" href="#">NEXT</a>
    </div>
  </div>

  <div class="content_blog_list">
    <div class="main_blog_list">
      <a href="#" class="content_blog">
        <div class="blog_image">
          <img src="/img/blog1.jpg" alt="" />
        </div>
        <span>Cyber Attack</span>
      </a>
      <a href="#" class="content_blog">
        <div class="blog_image">
          <img src="/img/blog2.jpg" alt="" />
        </div>
        <span>Malware</span>
      </a>
      <a href="#" class="content_blog">
        <div class="blog_image">
          <img src="/img/blog3.jpg" alt="" />
        </div>
        <span>Cyber Threat</span>
      </a>
      <a href="#" class="content_blog">
        <div class="blog_image">
          <img src="/img/blog4.jpg" alt="" />
        </div>
        <span>Vulnerability</span>
      </a>
    </div>
  </div>
</div>

<script src="//cdn.jsdelivr.net/gh/freeps2/a7rarpress@main/swiper-bundle.min.js"></script>

<script src="//cdn.jsdelivr.net/gh/freeps2/a7rarpress@main/script.js"></script>

<script>
    const baseURL = "<%= process.env.BACKEND_API %>";
  document.addEventListener("DOMContentLoaded", async function () {
    try {
      document
        .getElementById("searchButton")
        .addEventListener("click", async function () {
          const searchInputValue = document.getElementById("searchInput").value;
          const page = 1; // Assuming you start from page 1
          const url = `${baseURL}/api/news/searchNews?pageSize=12&page=${page}&title=${searchInputValue}`;

          const response = await fetch(url);
          const data = await response.json();
          console.log("ðŸš€ ~ document.getElementById ~ data:", data);

          // Check if data is not empty
          if (data && data.data.length > 0) {
            // Store data in localStorage
            sessionStorage.setItem("searchResults", JSON.stringify(data.data));
            // Redirect to /searchnews
            window.location.href = "/searchnews";
          } else {
            console.log("No results found.");
          }
        });
    } catch (error) {
      console.error("Error loading data:", error);
    }
  });

  var swiper = new Swiper(".slide-content", {
    slidesPerView: 3,
    spaceBetween: 25,
    loop: true,
    centerSlide: "true",
    fade: "true",
    grabCursor: "true",
    pagination: {
      el: ".swiper-pagination",
      clickable: true,
      dynamicBullets: true,
    },
    navigation: {
      nextEl: ".swiper-button-next",
      prevEl: ".swiper-button-prev",
    },

    breakpoints: {
      0: {
        slidesPerView: 1,
      },
      520: {
        slidesPerView: 2,
      },
      950: {
        slidesPerView: 3,
      },
    },
  });
</script>

<script>
  window.onload = async function () {
    const baseURL = "<%= process.env.BACKEND_API %>";
    try {
      const maxTextLength = 100;
      // Function to fetch data from the provided URL
      const fetchData = async (url) => {
        const response = await fetch(url);
        return await response.json();
      };

      // Function to sanitize HTML content to text
      const sanitizeHTML = (html) => {
        const temp = document.createElement("div");
        temp.innerHTML = html;
        return temp.textContent || temp.innerText || "";
      };

      // Function to create a news item element
      const createNewsItem = (newsItem) => {
        const item = document.createElement("div");
        item.classList.add("maketing_articles");
        const formattedDate = new Date(newsItem.date).toLocaleDateString(
          "en-US",
          { year: "numeric", month: "long", day: "numeric" }
        );
        // HTML template for the news item
        item.innerHTML = `
                <div class="container_box_articles">
                        <div class="articles_img">
                            <img src="/images/${newsItem.imgLinks}.webp" alt="${
          newsItem.imgLinks
        }">
                        </div>
                        <div class="articles_list">
                            <div class="articles_category">
                                <i class="fa fa-th-large"></i>
                                <span>${newsItem.pTags}</span>
                            </div>
                            <div class="articles_date">
                                <i class="fa fa-clock-o" aria-hidden="true"></i>
                                <span>${formattedDate}</span>
                            </div>
                        </div>
                        <div class="header_articles">
                            <h1>${newsItem.titleTh}</h1>
                        </div>
                        <div class="desc_articles">
                            <p>${sanitizeHTML(
                              newsItem.contentTh.substring(0, maxTextLength)
                            )}${
          newsItem.contentTh.length > maxTextLength ? "..." : ""
        }</p>
                        </div>
                        <a  class="read-more-button" 
                            data-news-id="${newsItem.id}"
                            data-img-url="${newsItem.imgLinks}"
                            data-title-th="${newsItem.titleTh}"
                            data-content-th="${newsItem.contentTh}"
                            data-title-en="${newsItem.title}"
                            data-content-en="${sanitizeHTML(
                              newsItem.contentEn
                            )}"
                            data-date="${newsItem.date}"
                            data-author="${newsItem.author}"
                            type="button">Read More</a>
                    </div>
                    <div class="article_option">
                        <div class="profile_article_writing">
                            <img src="img/rectangle-21.png" alt="">
                            <span>${newsItem.author}</span>
                        </div>
                        <div class="related_article_view">
                            <i class="fa-solid fa-eye"></i>
                            <span>${newsItem.viewCount}</span>
                        </div>
                    </div>
                `;

        return item;
      };

      // Select the containers for marketing articles and related blogs
      const marketingArticlesContainer = document.querySelector(
        ".main_maketing_articles"
      );

      // Function to append news items to a container
      const appendNewsItems = (container, newsItems) => {
        const fragment = document.createDocumentFragment();
        newsItems.forEach((newsItem) => {
          fragment.appendChild(createNewsItem(newsItem));
        });
        container.appendChild(fragment);
      };

      // Function to create pagination
      // Function to create pagination
      const createPagination = (currentPage, totalPages) => {
        const paginationContainer = document.querySelector(
          ".container_pagination"
        );
        paginationContainer.innerHTML = ""; // Clear existing pagination

        const prevButton = document.createElement("a");
        prevButton.classList.add("pagination-newer");
        prevButton.textContent = "PREV";
        // prevButton.href = '#';
        prevButton.addEventListener("click", () => {
          if (currentPage > 1) {
            fetchDataForPage(currentPage - 1);
          }
        });
        paginationContainer.appendChild(prevButton);

        const paginationInner = document.createElement("span");
        paginationInner.classList.add("pagination-inner");

        // Add page links
        const maxVisiblePages = 5; // Maximum number of visible page links
        const halfVisiblePages = Math.floor(maxVisiblePages / 2);
        let startPage = Math.max(currentPage - halfVisiblePages, 1);
        let endPage = Math.min(startPage + maxVisiblePages - 1, totalPages);

        if (endPage - startPage < maxVisiblePages - 1) {
          startPage = Math.max(endPage - maxVisiblePages + 1, 1);
        }

        if (startPage > 1) {
          const ellipsisStart = document.createElement("span");
          ellipsisStart.textContent = "...";
          paginationInner.appendChild(ellipsisStart);
        }

        for (let i = startPage; i <= endPage; i++) {
          const pageLink = document.createElement("a");
          // pageLink.href = '#';
          pageLink.textContent = i;
          if (i === currentPage) {
            pageLink.classList.add("pagination-active");
          }
          pageLink.addEventListener("click", () => {
            fetchDataForPage(i);
          });
          paginationInner.appendChild(pageLink);
        }

        if (endPage < totalPages) {
          const ellipsisEnd = document.createElement("span");
          ellipsisEnd.textContent = "...";
          paginationInner.appendChild(ellipsisEnd);
        }

        paginationContainer.appendChild(paginationInner);

        const nextButton = document.createElement("a");
        nextButton.classList.add("pagination-older");
        nextButton.textContent = "NEXT";
        // nextButton.href = '#';
        nextButton.addEventListener("click", () => {
          if (currentPage < totalPages) {
            fetchDataForPage(currentPage + 1);
          }
        });
        paginationContainer.appendChild(nextButton);
      };

      // Function to fetch data for a specific page
      const fetchDataForPage = async (page) => {
        try {
          const response = await fetch(`${baseURL}/api/news?page=${page}`);
          const data = await response.json();
          const newsItems = data.news;
          // Clear existing news items
          marketingArticlesContainer.innerHTML = "";
          appendNewsItems(marketingArticlesContainer, newsItems);
          createPagination(page, data.pagination.totalPages);
        } catch (error) {
          console.error("Error fetching data:", error);
        }
      };

      // Fetch initial data for the first page
      const initializePagination = async () => {
        try {
          const response = await fetch(`${baseURL}/api/news`);
          const data = await response.json();
          const newsItems = data.news;
          const currentPage = data.pagination.currentPage;
          const totalPages = data.pagination.totalPages;
          appendNewsItems(marketingArticlesContainer, newsItems);
          createPagination(currentPage, totalPages);
        } catch (error) {
          console.error("Error initializing pagination:", error);
        }
      };

      // Initialize pagination
      initializePagination();

      // Function to fetch user IP using ipify.org API
      const fetchUserIp = async () => {
        try {
          const response = await fetch("https://api.ipify.org?format=json");
          const data = await response.json();
          // console.log("ðŸš€ ~ fetchUserIp ~ data:", data)
          return data.ip;
        } catch (error) {
          console.error("Error fetching user IP:", error);
          return null;
        }
      };

      // Event listener for "Read More" buttons
      document.addEventListener("click", async function (event) {
        if (event.target.classList.contains("read-more-button")) {
          event.preventDefault();
          const button = event.target;
          const newsId = button.getAttribute("data-news-id");
          const imgLinks = button.getAttribute("data-img-url");
          const titleTh = button.getAttribute("data-title-th");
          const contentTh = button.getAttribute("data-content-th");
          const titleEn = button.getAttribute("data-title-en");
          const contentEn = button.getAttribute("data-content-en");
          const date = button.getAttribute("data-date");
          const author = button.getAttribute("data-author");

          // Fetch user IP
          const userIp = await fetchUserIp();
          console.log("ðŸš€ ~ document.addEventListener ~ userIp:", userIp);
          if (userIp) {
            // Prepare data to be sent to the backend API
            const requestData = {
              newsId: newsId,
              userIp: userIp,
            };

            // Send the data to the backend API
            try {
              const logViewResponse = await fetch(
                `${baseURL}/api/news/logView`,
                {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify(requestData),
                }
              );

              const logViewData = await logViewResponse.json();
              // Do something with the response if needed
            } catch (error) {
              console.error("Error logging view:", error);
            }
          } else {
            console.error("Unable to fetch user IP.");
          }

          
            // Store selected news data in localStorage
            sessionStorage.setItem('selectedNews', JSON.stringify({ newsId, imgLinks, titleTh, contentTh, titleEn, contentEn, date, author }));

          // Redirect to the news page
          let url;
          if (button.classList.contains("related_blog")) {
            url = `/news/${newsId}`; // Assuming the URL pattern for blogs is '/blogs/{id}'
          } else {
            url = `/news/${newsId}`; // Assuming the URL pattern for news is '/news/{id}'
          }
          window.location.href = url;
        }
      });
    } catch (error) {
      console.error("Error loading data:", error);
    }
    // Function to fetch trending news

    const maxTextLength = 100;

    // Function to sanitize HTML content to text
    const sanitizeHTML = (html) => {
      const temp = document.createElement("div");
      temp.innerHTML = html;
      return temp.textContent || temp.innerText || "";
    };

    // Function to fetch trending news with pagination
    // Function to fetch trending news with pagination
    const fetchTrendingNews = async () => {
  try {
    const response = await fetch(
      `${baseURL}/api/news/search?trendNew=Trending%20News`
    );
    const data = await response.json();
    const trendingNews = data.data;
    const currentPage = data.pagination.currentPage;
    const totalPages = data.pagination.totalPages;

    // Clear existing trending news items
    const trendingNewsContainer = document.querySelector(
      ".slide-container .card-wrapper"
    );
    trendingNewsContainer.innerHTML = "";

    // Append trending news items
    trendingNews.forEach((newsItem) => {
      // Create trending news card element
      const trendingNewsCard = document.createElement("div");
      trendingNewsCard.classList.add("card", "swiper-slide");
      
      // Set image source
      const imageContent = document.createElement("div");
      imageContent.classList.add("image-content");
      const img = document.createElement("img");
      img.src = `/images/${newsItem.imgLinks}.webp`;
      img.alt = newsItem.imgLinks;
      imageContent.appendChild(img);
      trendingNewsCard.appendChild(imageContent);

      // Set card content
      const cardContent = document.createElement("div");
      cardContent.classList.add("card-content");
      const formattedDate = new Date(newsItem.date).toLocaleDateString(
        "en-US",
        { year: "numeric", month: "long", day: "numeric" }
      );
      cardContent.innerHTML = `
        <h2 class="name">${newsItem.titleTh}</h2>
        <p class="description">${sanitizeHTML(
          newsItem.contentTh.substring(0, maxTextLength)
        )}${newsItem.contentTh.length > maxTextLength ? "..." : ""}</p>
        <button class="button read-more-button" 
                data-news-id="${newsItem.id}"
                data-img-url="${newsItem.imgLinks}"
                data-title-th="${newsItem.titleTh}"
                data-content-th="${newsItem.contentTh}"
                data-title-en="${newsItem.title}"
                data-content-en="${sanitizeHTML(newsItem.contentEn)}"
                data-date="${formattedDate}"
                data-author="${newsItem.author}">Read More</button>
      `;
      trendingNewsCard.appendChild(cardContent);

      // Append card to container
      trendingNewsContainer.appendChild(trendingNewsCard);
    });

    // Initialize Swiper slider after appending trending news cards
    initSwiper();

    // Create pagination for trending news
    createPagination(currentPage, totalPages);
  } catch (error) {
    console.error("Error fetching trending news:", error);
  }
};

// Call the function to fetch and display trending news
fetchTrendingNews();

  };
</script>
