<script>
  let slideIndex = 0;
  showSlides();

  function showSlides() {
    let slides = document.getElementsByClassName("mySlides");
    for (let i = 0; i < slides.length; i++) {
      slides[i].style.display = "none";
    }
    slideIndex++;
    if (slideIndex > slides.length) { slideIndex = 1 }
    slides[slideIndex - 1].style.display = "block";
    setTimeout(showSlides, 6000); // Change image every 1 minute
  }
</script>


<script>
  const baseURL = "<%= process.env.BACKEND_API %>";
  document.addEventListener("DOMContentLoaded", async function () {
    try {
      document
        .getElementById("searchButton")
        .addEventListener("click", async function () {
          const searchInputValue = document.getElementById("searchInput").value;
          const page = 1; // Assuming you start from page 1
          const url = `${baseURL}/api/news/searchNews?pageSize=12&page=${page}&title=${searchInputValue}`;

          const response = await fetch(url);

          // Check if response status is 404
          if (response.status === 404) {
            // Show toast notification for "Not Found"
            Toastify({
              text: "ไม่พบข้อมูลที่ค้นหา",
              duration: 3000, // 3 seconds
              close: true,
              gravity: "top", // `top` or `bottom`
              position: "right", // `left`, `center` or `right`
              backgroundColor: "#ff4444",
            }).showToast();
          } else {
            const data = await response.json();
            console.log("🚀 ~ document.getElementById ~ data:", data);

            // Check if data is not empty
            if (data && data.data.length > 0) {
              // Store data in localStorage
              sessionStorage.setItem("searchResults", JSON.stringify(data.data));
              // Redirect to /searchnews
              window.location.href = "/searchnews";
            } else {
              console.log("No results found.");
            }
          }
        });
    } catch (error) {
      console.error("Error loading data:", error);
    }
  });
</script>

<script>
  window.onload = async function () {
    const baseURL = "<%= process.env.BACKEND_API %>";
    try {
      const maxTextLength = 100;
      // Function to fetch data from the provided URL
      const fetchData = async (url) => {
        const response = await fetch(url);
        return await response.json();
      };

      // Function to sanitize HTML content to text
      const sanitizeHTML = (html) => {
        const temp = document.createElement("div");
        temp.innerHTML = html;
        return temp.textContent || temp.innerText || "";
      };

      // Function to create a news item element
      const createNewsItem = (newsItem) => {
        const item = document.createElement("div");
        item.classList.add("maketing_articles");
        const formattedDate = new Date(newsItem.date).toLocaleDateString(
          "en-US",
          { year: "numeric", month: "long", day: "numeric" }
        );
        // HTML template for the news item
        item.innerHTML = `
                <div class="container_box_articles">
                        <div class="articles_img">
                            <img src="/images/${newsItem.imgLinks}.webp" alt="${newsItem.imgLinks
          }">
                        </div>
                        <div class="articles_list">
                            <div class="articles_category">
                                <i class="fa fa-th-large"></i>
                                <span>${newsItem.pTags}</span>
                            </div>
                            <div class="articles_date">
                                <i class="fa fa-clock-o" aria-hidden="true"></i>
                                <span>${formattedDate}</span>
                            </div>
                        </div>
                        <div class="header_articles">
                            <h1>${newsItem.titleTh}</h1>
                        </div>
                        <div class="desc_articles">
                            <p>${sanitizeHTML(
            newsItem.contentTh.substring(0, maxTextLength)
          )}${newsItem.contentTh.length > maxTextLength ? "..." : ""
          }</p>
                        </div>
                        <a  class="read-more-button" 
                            data-news-id="${newsItem.id}"
                            type="button">Read More</a>
                    </div>
                    <div class="article_option">
                        <div class="profile_article_writing">
                            <img src="img/rectangle-21.png" alt="">
                            <span>${newsItem.author}</span>
                        </div>
                        <div class="related_article_view">
                            <i class="fa-solid fa-eye"></i>
                            <span>${newsItem.viewCount}</span>
                        </div>
                    </div>
                `;

        return item;
      };

      // Select the containers for marketing articles and related blogs
      const marketingArticlesContainer = document.querySelector(
        ".main_maketing_articles"
      );

      // Function to append news items to a container
      const appendNewsItems = (container, newsItems) => {
        const fragment = document.createDocumentFragment();
        newsItems.forEach((newsItem) => {
          fragment.appendChild(createNewsItem(newsItem));
        });
        container.appendChild(fragment);
      };

      // Function to create pagination
      // Function to create pagination
      const createPagination = (currentPage, totalPages) => {
        const paginationContainer = document.querySelector(
          ".container_pagination"
        );
        paginationContainer.innerHTML = ""; // Clear existing pagination

        const prevButton = document.createElement("a");
        prevButton.classList.add("pagination-newer");
        prevButton.textContent = "PREV";
        // prevButton.href = '#';
        prevButton.addEventListener("click", () => {
          if (currentPage > 1) {
            fetchDataForPage(currentPage - 1);
          }
        });
        paginationContainer.appendChild(prevButton);

        const paginationInner = document.createElement("span");
        paginationInner.classList.add("pagination-inner");

        // Add page links
        const maxVisiblePages = 5; // Maximum number of visible page links
        const halfVisiblePages = Math.floor(maxVisiblePages / 2);
        let startPage = Math.max(currentPage - halfVisiblePages, 1);
        let endPage = Math.min(startPage + maxVisiblePages - 1, totalPages);

        if (endPage - startPage < maxVisiblePages - 1) {
          startPage = Math.max(endPage - maxVisiblePages + 1, 1);
        }

        if (startPage > 1) {
          const ellipsisStart = document.createElement("span");
          ellipsisStart.textContent = "...";
          paginationInner.appendChild(ellipsisStart);
        }

        for (let i = startPage; i <= endPage; i++) {
          const pageLink = document.createElement("a");
          // pageLink.href = '#';
          pageLink.textContent = i;
          if (i === currentPage) {
            pageLink.classList.add("pagination-active");
          }
          pageLink.addEventListener("click", () => {
            fetchDataForPage(i);
          });
          paginationInner.appendChild(pageLink);
        }

        if (endPage < totalPages) {
          const ellipsisEnd = document.createElement("span");
          ellipsisEnd.textContent = "...";
          paginationInner.appendChild(ellipsisEnd);
        }

        paginationContainer.appendChild(paginationInner);

        const nextButton = document.createElement("a");
        nextButton.classList.add("pagination-older");
        nextButton.textContent = "NEXT";
        // nextButton.href = '#';
        nextButton.addEventListener("click", () => {
          if (currentPage < totalPages) {
            fetchDataForPage(currentPage + 1);
          }
        });
        paginationContainer.appendChild(nextButton);
      };

      // Function to fetch data for a specific page
      const fetchDataForPage = async (page) => {
        try {
          const response = await fetch(`${baseURL}/api/news?page=${page}`);
          const data = await response.json();
          const newsItems = data.news;
          // Clear existing news items
          marketingArticlesContainer.innerHTML = "";
          appendNewsItems(marketingArticlesContainer, newsItems);
          createPagination(page, data.pagination.totalPages);
        } catch (error) {
          console.error("Error fetching data:", error);
        }
      };

      // Fetch initial data for the first page
      const initializePagination = async () => {
        try {
          const response = await fetch(`${baseURL}/api/news`);
          const data = await response.json();
          const newsItems = data.news;
          const currentPage = data.pagination.currentPage;
          const totalPages = data.pagination.totalPages;
          appendNewsItems(marketingArticlesContainer, newsItems);
          createPagination(currentPage, totalPages);
        } catch (error) {
          console.error("Error initializing pagination:", error);
        }
      };

      // Initialize pagination
      initializePagination();

      // Function to fetch user IP using ipify.org API
      const fetchUserIp = async () => {
        try {
          const response = await fetch("https://api.ipify.org?format=json");
          const data = await response.json();
          // console.log("🚀 ~ fetchUserIp ~ data:", data)
          return data.ip;
        } catch (error) {
          console.error("Error fetching user IP:", error);
          return null;
        }
      };

      // Event listener for "Read More" buttons
      // Event listener for "Read More" buttons
document.addEventListener("click", async function (event) {
  if (event.target.classList.contains("read-more-button")) {
    event.preventDefault();
    const button = event.target;
    const newsId = button.getAttribute("data-news-id");
    const imgLinks = button.getAttribute("data-img-url");
    const titleTh = button.getAttribute("data-title-th");
    const contentTh = button.getAttribute("data-content-th");
    const titleEn = button.getAttribute("data-title-en");
    const contentEn = button.getAttribute("data-content-en");
    const date = button.getAttribute("data-date");
    const author = button.getAttribute("data-author");

    // Fetch user IP
    const userIp = await fetchUserIp();
    console.log("🚀 ~ document.addEventListener ~ userIp:", userIp);
    if (userIp) {
      // Prepare data to be sent to the backend API
      const requestData = {
        newsId: newsId,
        userIp: userIp,
      };

      // Send the data to the backend API
      try {
        const logViewResponse = await fetch(
          `${baseURL}/api/news/logView`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(requestData),
          }
        );

        const logViewData = await logViewResponse.json();
        // Do something with the response if needed
      } catch (error) {
        console.error("Error logging view:", error);
      }
    } else {
      console.error("Unable to fetch user IP.");
    }

    // Redirect to the news page
    window.location.href = `/news/${newsId}`;
  } else if (event.target.classList.contains("slide-content")) {
    event.preventDefault();
    const slideContent = event.target;
    const newsId = slideContent.getAttribute("data-news-id");
    window.location.href = `/news/${newsId}`;
  }
});

    } catch (error) {
      console.error("Error loading data:", error);
    }
    // Function to fetch trending news

    const maxTextLength = 100;

    // Function to sanitize HTML content to text
    const sanitizeHTML = (html) => {
      const temp = document.createElement("div");
      temp.innerHTML = html;
      return temp.textContent || temp.innerText || "";
    };

    // Function to fetch trending news with pagination
    const fetchTrendingNews = async () => {
      try {
        const response = await fetch(`${baseURL}/api/news/search?trendNew=Trending%20News`);
        const data = await response.json();
        const trendingNews = data.data;

        // Clear existing trending news items
        const trendingSlide = document.querySelector('.trending_slide');
        trendingSlide.innerHTML = '';

        // Append trending news items
        trendingNews.forEach(newsItem => {
          // Create slide element
          const slide = document.createElement('div');
          slide.classList.add('mySlides', 'fade');

          // Set image source
          const img = document.createElement('img');
          img.src = `/images/${newsItem.imgLinks}.webp`;
          img.style.width = '100%';
          slide.appendChild(img);

          // Create slide content link
          const slideContent = document.createElement('a');
          slideContent.href = '#';
          slideContent.classList.add('slide-content');

// Function to remove HTML tags from content
const removeHTMLTags = (str) => {
   // Remove HTML tags
   let strippedString = str.replace(/<[^>]*>/g, "");

// Remove class attributes
strippedString = strippedString.replace(/class\s*=\s*["'][^"']*["']/g, "");

return strippedString;
};

// Set slide content
const slideHeader = document.createElement('h2');
const maxHeaderTextLength = 200; // จำนวนตัวอักษรสูงสุดที่ต้องการแสดง
const trimmedHeaderText = removeHTMLTags(newsItem.titleTh).substring(0, maxHeaderTextLength);
slideHeader.textContent = trimmedHeaderText + (newsItem.titleTh.length > maxHeaderTextLength ? '...' : '');

const slideDescription = document.createElement('p');
const maxTextLength = 300; // จำนวนตัวอักษรสูงสุดที่ต้องการแสดง
const trimmedContent = removeHTMLTags(newsItem.contentTh).substring(0, maxTextLength);
slideDescription.textContent = trimmedContent + (newsItem.contentTh.length > maxTextLength ? '...' : '');

          slideContent.appendChild(slideHeader);
          slideContent.appendChild(slideDescription);
          slide.appendChild(slideContent);

          // Append slide to trending slides container
          trendingSlide.appendChild(slide);

          // Add click event listener to slide content link
          slideContent.addEventListener('click', () => {
            handleSlideContentClick(newsItem);
          });
        });

        // Start slideshow
        let slideIndex = 0;
        showSlides();

        function showSlides() {
          const slides = document.getElementsByClassName("mySlides");
          for (let i = 0; i < slides.length; i++) {
            slides[i].style.display = "none";
          }
          slideIndex++;
          if (slideIndex > slides.length) {
            slideIndex = 1;
          }
          slides[slideIndex - 1].style.display = "block";
          setTimeout(showSlides, 6000); // Change image every 1 minute
        }

        // Function to handle slide content click
        function handleSlideContentClick(newsItem) {
          // Perform actions when slide content is clicked
          console.log('Slide content clicked:', newsItem);
          // Example: Redirect to news details page
          window.location.href = `/news/${newsItem.id}`;
        }
      } catch (error) {
        console.error('Error fetching trending news:', error);
      }
    };

    // Call the function to fetch and display trending news
    fetchTrendingNews();
  };
</script>

<div class="container_blog">
  <div class="content_banner">
    <div class="content_text_blog">
      <div class="content_line1">
        <span>เกี่ยวกับเรา</span>
        <span id="span_blue">เว็บไซต์ CyberNew</span>
      </div>
      <div class="content_line2">
        <h1>CyberNew เป็นแหล่งข่าวและข้อมูลที่เกี่ยวกับเทคโนโลยีและความปลอดภัยทางไซเบอร์ที่มีความสำคัญสำหรับผู้ใช้งานทั่วไปและนักเทคโนโลยีที่กำลังมองหาข้อมูลที่เป็นประโยชน์</h1>
        <p>
          ด้วยเนื้อหาที่หลากหลายและครอบคลุมทั้งในด้านข่าวสารและเทคนิค CyberNew เป็นที่น่าเชื่อถือสำหรับผู้ใช้งานที่ต้องการอัพเดตเกี่ยวกับเทคโนโลยีและความปลอดภัยทางไซเบอร์ในยุคปัจจุบันที่เติบโตอย่างรวดเร็ว
        </p>
      </div>
    </div>
    <div class="content_img_blog">
      <img src="/img/darkweb.png" alt="" />
    </div>
  </div>
</div>

<div class="content_related_blog">
  <div class="header_blog_list">
    <h1>Trending News</h1>
  </div>
  <div class="trending_slide">
    <!-- <div class="mySlides fade">
      <img src="/img/background.png" style="width:100%">
      <a  class="slide-content">
        <h2>Header 1</h2>
        <p>Description 1</p>
      </a>
    </div> -->

    <!-- <div class="mySlides fade">
      <img src="/img/blog1.jpg" style="width:100%">
      <a href="#" class="slide-content">
        <h2>Header 2</h2>
        <p>Description 2</p>
      </a>
    </div>

    <div class="mySlides fade">
      <img src="/img/blog2.jpg" style="width:100%">
      <a href="#" class="slide-content">
        <h2>Header 3</h2>
        <p>Description 3</p>
      </a>
    </div> -->
  </div>
</div>

<div class="content_maketing_articles">
  <div class="header_blog_list">
    <h1>News Articles</h1>
  </div>
  <div class="search_blog_list">
    <input type="text" id="searchInput" placeholder="Search News" />
    <button id="searchButton">
      <i class="fa fa-search" aria-hidden="true"></i>
    </button>
  </div>
  <div class="main_maketing_articles"></div>

  <div class="container_pagination">
    <div class="pagination">
      <a class="pagination-newer" href="#">PREV</a>
      <span class="pagination-inner">
        <a href="#">1</a>
        <a href="#">2</a>
        <a href="#">3</a>
        <a href="#">4</a>
        <a href="#">5</a>
        <a href="#">6</a>
      </span>
      <a class="pagination-older" href="#">NEXT</a>
    </div>
  </div>

  <div class="content_blog_list">
    <div class="main_blog_list">
      <a href="#" class="content_blog">
        <div class="blog_image">
          <img src="/img/blog1.jpg" alt="" />
        </div>
        <span>Cyber Attack</span>
      </a>
      <a href="#" class="content_blog">
        <div class="blog_image">
          <img src="/img/blog2.jpg" alt="" />
        </div>
        <span>Malware</span>
      </a>
      <a href="#" class="content_blog">
        <div class="blog_image">
          <img src="/img/blog3.jpg" alt="" />
        </div>
        <span>Cyber Threat</span>
      </a>
      <a href="#" class="content_blog">
        <div class="blog_image">
          <img src="/img/blog4.jpg" alt="" />
        </div>
        <span>Vulnerability</span>
      </a>
    </div>
  </div>
</div>